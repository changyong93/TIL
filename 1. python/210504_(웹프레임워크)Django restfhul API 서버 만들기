# 참고 영상 : www.youtube.com/watch?v=GDmm4JH4loc
# 참고 자료 : https://nesoy.github.io/articles/2017-02/REST(rest, rest API, restful)
------------------------------------------------------------------------------------------------
1회차
- pycharm으로 진행

- 가상머신 생성
  - 프로젝트마다 다양한 외부 라이브러리를 설치하는데, A프로젝트에선 1,2,3 라이브러리 사용하고, B프로젝트에선 3,4,5라이브 러리를 사용
  - 이 경우 A or B 프로젝트를 빌드할 경우 불필요한 라이브러리도 빌드됨
  - 또한, 프로젝트마다 적용된 라이브러리의 버전이 다를 경우 문제가 발생할 수 있음
  - 따라서 프로젝트마다 개별 가상환경 구축을 통하여 불필요 라이브러리 미설치 및 버전 관리가 필요함
 
- 새로운 가상환경에서 프로젝트 생성 :: create project => location 지정(경로의 마지막이 파일명) => new env. : Viertualenv => base interpreter 지정
 
- pycharm에선 가상환경마다 필요한 라이브러리를 프로그램 내에서 설치 가능 :: settings => project interpreter => 라이브러리 검색 => 버전 설정(optional) => install
 
**가상환경&프로젝트 삭제 시 가상환경 폴더가 위치한 상위 폴더 경로로 이동 => rmdir /s (프로젝트명)
- terminal에서 서버 구축 :: 생성한 프로젝트에서 Django 라이브러리 설치 => terminal 창 이동 => django-admin치면 관련 명령어 확인 가능
                            => django-admin startproject (프로젝트명) *단이 경우 새로운 프로젝트가 생성됨
- cmd에서 서버 구축 :: (pycharm기준) cd ~~/charmProjects 이동(optinal) => python -m venv (가상환경명)(가상환경 생성) => 스크립트 경로로 이동(cd) => activate (가상환경 활성화)
                        => cd ~~/charmProjects 이동 => pip install django => django-admin startproject (프로젝트명)
- 서버 실행 : (terminal & cmd 동일하게, 프로젝트 경로로 가서) python manage.py runserver [option] (option은 선택사항)
=> pycharm에서 run 키 구현 => run => edit configuration // pycharm 화면의 add edit configuration 클릭 => add bew run .... => python

- 장고 특징 : 터미널 or python 어느 것으로 서버를 실행시키든지 소스를 수정할 경우 자동으로 반영되어 서버가 재시작됨

- local로 사용 시 실행 시 출력되는 서버 주소를 그대로 사용해도 되지만, AWS, 회사컴퓨터, 모바일 등에서 접속 시 설정이 막혀 있어서 접속이 불가
    => settings.py에서 allowed_host = [] => allwoed_host["*"]로 바꾸면 아무나 들어올 수 있음 + configurations의 parameter를 runserver => runserver 0.0.0.0:8000 (예시) 으로 변경
    => 이렇게 변경 시 서버를 실행한 컴퓨터의 아이피 주소를 알면 들어올 수 있고, AWS에 올려졌다면 AWS 주소로 다른 컴퓨터나 모바일에서 접속 가능

------------------------------------------------------------------------------------------------
2회차 : https://www.youtube.com/watch?v=lKDw_xqo-Ro
- 장고에 restful 프레임워크를 설치하여 클라이언트와 통신 기능 구현
- api 서버를 테스트 시 서버를 데이터를 전송하는 클라이언트(프로그램)이 필요 => 테스트 전용 툴 활용(insomnia Rest client, ...)
- 테스트 및 서버 구축 진행 => Djangorestframework(Django안에서 RESTful API서버를 쉽게 구축할 수 있도록 도와주는 오픈소스 라이브러리, 검색 후 해당 페이지에서 지시한 라이브러리 설치)
  : Djangorestframework, django-filter, markdown
  

    
    
